        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      resetISR ; Reset               ; Int 08h (IRQ 0)
        dd      tickISR ; Tick                ; Int 09h (IRQ 1)
        dd      keyboardISR ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

resetISR:
	call resetISRC
	
tickISR:

	mov cx, [okToSwitch]
	cmp cx, 0
	jp	YKRet


	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push bp
	push es
	push ds


	call YKEnterISR

	sti
	call tickISRC
	call YKTickHandler
	cli
	
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)

	call YKExitISR

	cli
	
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax

	iret

YKRet:	

	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	iret

keyboardISR:

	mov cx, [okToSwitch]
	cmp cx, 0
	jp	YKRet

	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push bp
	push es
	push ds

	sti
	call keyboardISRC
	
	
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)
	
	pop ds
	pop es
	pop bp
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax

	iret


; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_myinth_1:
	DW	1
L_myinth_2:
	DW	0
L_myinth_3:
	DB	"RESET",0
	ALIGN	2
resetISRC:
	; >>>>> Line:	9
	; >>>>> { 
	jmp	L_myinth_4
L_myinth_5:
	; >>>>> Line:	10
	; >>>>> printString("RESET"); 
	mov	ax, L_myinth_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	11
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_4:
	push	bp
	mov	bp, sp
	jmp	L_myinth_5
L_myinth_8:
	DB	0xA,0
L_myinth_7:
	DB	0xA,"TICK",0
	ALIGN	2
tickISRC:
	; >>>>> Line:	15
	; >>>>> { 
	jmp	L_myinth_9
L_myinth_10:
	; >>>>> Line:	20
	; >>>>> printString("\nTICK"); 
	mov	ax, L_myinth_7
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	21
	; >>>>> printInt(n); 
	push	word [L_myinth_1]
	call	printInt
	add	sp, 2
	; >>>>> Line:	22
	; >>>>> printString("\n"); 
	mov	ax, L_myinth_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	24
	; >>>>> n++; 
	inc	word [L_myinth_1]
	mov	sp, bp
	pop	bp
	ret
L_myinth_9:
	push	bp
	mov	bp, sp
	jmp	L_myinth_10
L_myinth_15:
	DB	") IGNORED",0xA,0
L_myinth_14:
	DB	0xA,"KEYPRESS (",0
L_myinth_13:
	DB	0xA,"DELAY COMPLETE",0xA,0
L_myinth_12:
	DB	0xA,"DELAY KEY PRESSED",0xA,0
	ALIGN	2
keyboardISRC:
	; >>>>> Line:	30
	; >>>>> { 
	jmp	L_myinth_16
L_myinth_17:
	; >>>>> Line:	31
	; >>>>> if(KeyBuffer == 'd') 
	cmp	word [KeyBuffer], 100
	jne	L_myinth_18
	; >>>>> Line:	34
	; >>>>> printString("\nDELAY KEY PRESSED\n 
	mov	ax, L_myinth_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	35
	; >>>>> for(i = 0; i < 5000; i++) 
	mov	word [L_myinth_2], 0
	jmp	L_myinth_20
L_myinth_19:
L_myinth_22:
	; >>>>> Line:	38
	; >>>>> } 
	inc	word [L_myinth_2]
L_myinth_20:
	cmp	word [L_myinth_2], 5000
	jl	L_myinth_19
L_myinth_21:
	; >>>>> Line:	40
	; >>>>> printString("\nDELAY COMPLETE\n"); 
	mov	ax, L_myinth_13
	push	ax
	call	printString
	add	sp, 2
	jmp	L_myinth_23
L_myinth_18:
	; >>>>> Line:	44
	; >>>>> printString("\nKEYPRESS ("); 
	mov	ax, L_myinth_14
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	45
	; >>>>> printChar((char)KeyBuffer); 
	push	word [KeyBuffer]
	call	printChar
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> printString(") IGNORED\n"); 
	mov	ax, L_myinth_15
	push	ax
	call	printString
	add	sp, 2
L_myinth_23:
	mov	sp, bp
	pop	bp
	ret
L_myinth_16:
	push	bp
	mov	bp, sp
	jmp	L_myinth_17
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab4_app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab4_app_2:
	DB	"Starting kernel...",0xA,0
L_lab4_app_1:
	DB	"Creating tasks...",0xA,0
	ALIGN	2
main:
	; >>>>> Line:	26
	; >>>>> { 
	jmp	L_lab4_app_3
L_lab4_app_4:
	; >>>>> Line:	27
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	29
	; >>>>> printString("Creating tasks...\n"); 
	mov	ax, L_lab4_app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	30
	; >>>>> YKNewTask(ATask, (void *) &AStk[256], 3); 
	mov	ax, 3
	push	ax
	mov	ax, (AStk+512)
	push	ax
	mov	ax, ATask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	31
	; >>>>> YKNewTask(B 
	mov	ax, 5
	push	ax
	mov	ax, (BStk+512)
	push	ax
	mov	ax, BTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	32
	; >>>>> YKNewTask(CTask, (void *) &CStk[256], 7); 
	mov	ax, 7
	push	ax
	mov	ax, (CStk+512)
	push	ax
	mov	ax, CTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	33
	; >>>>> YKNewTask(DTask, (void *) &DStk[256], 8); 
	mov	ax, 8
	push	ax
	mov	ax, (DStk+512)
	push	ax
	mov	ax, DTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	35
	; >>>>> printString("Starting kernel...\n"); 
	mov	ax, L_lab4_app_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	36
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_3:
	push	bp
	mov	bp, sp
	jmp	L_lab4_app_4
L_lab4_app_7:
	DB	"Task A, delaying 2.",0xA,0
L_lab4_app_6:
	DB	"Task A started.",0xA,0
	ALIGN	2
ATask:
	; >>>>> Line:	40
	; >>>>> { 
	jmp	L_lab4_app_8
L_lab4_app_9:
	; >>>>> Line:	41
	; >>>>> printString("Task A started.\n"); 
	mov	ax, L_lab4_app_6
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	42
	; >>>>> while (1) 
	jmp	L_lab4_app_11
L_lab4_app_10:
	; >>>>> Line:	44
	; >>>>> printString("Task A, delaying 2.\n"); 
	mov	ax, L_lab4_app_7
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> YKDelayTask(2); 
	mov	ax, 2
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> okToSwitch = 1; 
	mov	word [okToSwitch], 1
L_lab4_app_11:
	jmp	L_lab4_app_10
L_lab4_app_12:
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_8:
	push	bp
	mov	bp, sp
	jmp	L_lab4_app_9
L_lab4_app_15:
	DB	"Task B, delaying 3.",0xA,0
L_lab4_app_14:
	DB	"Task B started.",0xA,0
	ALIGN	2
BTask:
	; >>>>> Line:	53
	; >>>>> { 
	jmp	L_lab4_app_16
L_lab4_app_17:
	; >>>>> Line:	54
	; >>>>> printString("Task B started.\n"); 
	mov	ax, L_lab4_app_14
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	55
	; >>>>> while (1) 
	jmp	L_lab4_app_19
L_lab4_app_18:
	; >>>>> Line:	57
	; >>>>> printString("Task B, delaying 3.\n"); 
	mov	ax, L_lab4_app_15
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	59
	; >>>>> YKDelayTask(3); 
	mov	ax, 3
	push	ax
	call	YKDelayTask
	add	sp, 2
L_lab4_app_19:
	jmp	L_lab4_app_18
L_lab4_app_20:
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_16:
	push	bp
	mov	bp, sp
	jmp	L_lab4_app_17
L_lab4_app_23:
	DB	"Task C, delaying 5.",0xA,0
L_lab4_app_22:
	DB	"Task C started.",0xA,0
	ALIGN	2
CTask:
	; >>>>> Line:	66
	; >>>>> { 
	jmp	L_lab4_app_24
L_lab4_app_25:
	; >>>>> Line:	67
	; >>>>> printString("Task C started.\n"); 
	mov	ax, L_lab4_app_22
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	68
	; >>>>> while (1) 
	jmp	L_lab4_app_27
L_lab4_app_26:
	; >>>>> Line:	70
	; >>>>> printString("Task C, delaying 5.\n"); 
	mov	ax, L_lab4_app_23
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	72
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
L_lab4_app_27:
	jmp	L_lab4_app_26
L_lab4_app_28:
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_24:
	push	bp
	mov	bp, sp
	jmp	L_lab4_app_25
L_lab4_app_31:
	DB	"Task D, delaying 10.",0xA,0
L_lab4_app_30:
	DB	"Task D started.",0xA,0
	ALIGN	2
DTask:
	; >>>>> Line:	79
	; >>>>> { 
	jmp	L_lab4_app_32
L_lab4_app_33:
	; >>>>> Line:	80
	; >>>>> printString("Task D started.\n"); 
	mov	ax, L_lab4_app_30
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	81
	; >>>>> while (1) 
	jmp	L_lab4_app_35
L_lab4_app_34:
	; >>>>> Line:	83
	; >>>>> printString("Task D, delaying 10.\n"); 
	mov	ax, L_lab4_app_31
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	85
	; >>>>> YKDelayTask(10); 
	mov	ax, 10
	push	ax
	call	YKDelayTask
	add	sp, 2
L_lab4_app_35:
	jmp	L_lab4_app_34
L_lab4_app_36:
	mov	sp, bp
	pop	bp
	ret
L_lab4_app_32:
	push	bp
	mov	bp, sp
	jmp	L_lab4_app_33
	ALIGN	2
AStk:
	TIMES	512 db 0
BStk:
	TIMES	512 db 0
CStk:
	TIMES	512 db 0
DStk:
	TIMES	512 db 0
; Generated by c86 (BYU-NASM) 5.1 (beta) from yak.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKIdleCount:
	DW	0
isRunning:
	DW	0
currentTaskPriority:
	DB	102
	ALIGN	2
firstTime:
	DW	1
currentTCBIndex:
	DW	404
ISRDepth:
	DW	0
YKTickNum:
	DW	0
okToSwitch:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	28
	; >>>>> void YKInitialize(){ 
	jmp	L_yak_1
L_yak_2:
	; >>>>> Line:	30
	; >>>>> YKExitMutex(); 
	mov	word [bp-2], 0
	; >>>>> Line:	30
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	31
	; >>>>> for(i= 0; i < 15; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_4
L_yak_3:
	; >>>>> Line:	32
	; >>>>> TCBArray[i].inUse = 0; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	word [si], 0
L_yak_6:
	inc	word [bp-2]
L_yak_4:
	cmp	word [bp-2], 15
	jl	L_yak_3
L_yak_5:
	; >>>>> Line:	35
	; >>>>> YKNewTask(YKIdleTask, (void *)&IdleStk[2048] , 100); 
	mov	ax, 100
	push	ax
	mov	ax, (IdleStk+4096)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yak_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_2
	ALIGN	2
YKNewTask:
	; >>>>> Line:	40
	; >>>>> )&(TCBArray[i]); 
	jmp	L_yak_8
L_yak_9:
	; >>>>> Line:	45
	; >>>>> YKEnterMutex(); 
	mov	word [bp-2], 0
	; >>>>> Line:	45
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	46
	; >>>>> for(i = 0; i < 15; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_11
L_yak_10:
	; >>>>> Line:	47
	; >>>>> if(!TCBArray[i].inUse){ 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_14
	; >>>>> Line:	48
	; >>>>> break; 
	jmp	L_yak_12
L_yak_14:
L_yak_13:
	inc	word [bp-2]
L_yak_11:
	cmp	word [bp-2], 15
	jl	L_yak_10
L_yak_12:
	; >>>>> Line:	58
	; >>>>> TCBArray[i].taskID = i; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 24
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	59
	; >>>>> TCBArray[i].taskPriority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	mov	dx, ax
	add	dx, TCBArray
	mov	si, dx
	add	si, 26
	pop	ax
	mov	word [si], ax
	; >>>>> Line:	60
	; >>>>> TCBArray[i].taskStack = taskStack; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 22
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	61
	; >>>>> TCBArray[i].ip = (unsigned int)task; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	mov	si, ax
	add	si, TCBArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	62
	; >>>>> TCBArray[i].taskState = running; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 28
	mov	word [si], 0
	; >>>>> Line:	63
	; >>>>> TCBArray[i].delayCount = 0; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 30
	mov	word [si], 0
	; >>>>> Line:	64
	; >>>>> TCBArray[i].inUse = 1; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	word [si], 1
	; >>>>> Line:	65
	; >>>>> TCBArray[i].sp = (unsigned)(taskStack); 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	66
	; >>>>> TCBArray[i].bp = (unsigned)(taskStack); 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 4
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	69
	; >>>>> ourTCB = (unsigned)&(TCBArray[i]); 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	word [ourTCB], ax
	; >>>>> Line:	70
	; >>>>> YKExitMutex( 
	call	YKExitMutex
	; >>>>> Line:	71
	; >>>>> initializeStack(); 
	call	initializeStack
	; >>>>> Line:	73
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yak_8:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_9
	ALIGN	2
YKRun:
	; >>>>> Line:	76
	; >>>>> void YKRun(){ 
	jmp	L_yak_16
L_yak_17:
	; >>>>> Line:	77
	; >>>>> isRunning = 1; 
	mov	word [isRunning], 1
	; >>>>> Line:	78
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yak_16:
	push	bp
	mov	bp, sp
	jmp	L_yak_17
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	82
	; >>>>> void YKIdleTask(){ 
	jmp	L_yak_19
L_yak_20:
	; >>>>> Line:	84
	; >>>>> while(1){ 
	jmp	L_yak_22
L_yak_21:
	; >>>>> Line:	85
	; >>>>> okToSwitch = 1; 
	mov	word [okToSwitch], 1
	; >>>>> Line:	88
	; >>>>> for(i = 0; i < 1; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_25
L_yak_24:
	; >>>>> Line:	89
	; >>>>> i++; 
	inc	word [bp-2]
	; >>>>> Line:	90
	; >>>>> i--; 
	dec	word [bp-2]
L_yak_27:
	inc	word [bp-2]
L_yak_25:
	cmp	word [bp-2], 1
	jl	L_yak_24
L_yak_26:
	; >>>>> Line:	92
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
L_yak_22:
	jmp	L_yak_21
L_yak_23:
	mov	sp, bp
	pop	bp
	ret
L_yak_19:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_20
	ALIGN	2
YKScheduler:
	; >>>>> Line:	96
	; >>>>> void YKScheduler(){ 
	jmp	L_yak_29
L_yak_30:
	; >>>>> Line:	101
	; >>>>> for(index = 0; index < 15 ; index++){ 
	mov	word [bp-2], 0
	mov	word [bp-4], 101
	mov	word [bp-6], 101
	; >>>>> Line:	101
	; >>>>> for(index = 0; index < 15 ; index++){ 
	mov	word [bp-2], 0
	jmp	L_yak_32
L_yak_31:
	; >>>>> Line:	102
	; >>>>> if(!TCBArray[index].inUse){ 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_35
	; >>>>> Line:	103
	; >>>>> break; 
	jmp	L_yak_33
L_yak_35:
	; >>>>> Line:	105
	; >>>>> if(TCBArray[index].delayCount != 0){ 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 30
	mov	ax, word [si]
	test	ax, ax
	je	L_yak_36
	; >>>>> Line:	106
	; >>>>> continue; 
	jmp	L_yak_34
L_yak_36:
	; >>>>> Line:	109
	; >>>>> if(TCBArray[index].taskPriority <= highestPriority){ 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 26
	mov	ax, word [bp-4]
	cmp	ax, word [si]
	jb	L_yak_37
	; >>>>> Line:	110
	; >>>>> re 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 26
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	111
	; >>>>> indexOfTaskToRun = index; 
	mov	ax, word [bp-2]
	mov	word [bp-6], ax
L_yak_37:
L_yak_34:
	inc	word [bp-2]
L_yak_32:
	cmp	word [bp-2], 15
	jl	L_yak_31
L_yak_33:
	; >>>>> Line:	128
	; >>>>> ourTCB = (unsigned)&(TCBArray[currentTCBIndex]); 
	mov	ax, word [currentTCBIndex]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	word [ourTCB], ax
	; >>>>> Line:	129
	; >>>>> nextTCB = (unsigned)&(TCBArray[indexOfTaskToRun]); 
	mov	ax, word [bp-6]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	word [nextTCB], ax
	; >>>>> Line:	132
	; >>>>> if(!isRunning){ 
	mov	ax, word [isRunning]
	test	ax, ax
	jne	L_yak_38
	; >>>>> Line:	133
	; >>>>> currentTCBIndex = indexOfTaskToRun; 
	mov	ax, word [bp-6]
	mov	word [currentTCBIndex], ax
	; >>>>> Line:	134
	; >>>>> return; 
	jmp	L_yak_39
L_yak_38:
	; >>>>> Line:	137
	; >>>>> if(currentTCBIndex == indexOfTaskToRun && !firstTime){ 
	mov	ax, word [currentTCBIndex]
	cmp	ax, word [bp-6]
	jne	L_yak_40
	mov	ax, word [firstTime]
	test	ax, ax
	jne	L_yak_40
	; >>>>> Line:	138
	; >>>>> currentTCBIndex = indexOfTaskToRun; 
	mov	ax, word [bp-6]
	mov	word [currentTCBIndex], ax
	; >>>>> Line:	139
	; >>>>> return; 
	jmp	L_yak_39
L_yak_40:
	; >>>>> Line:	144
	; >>>>> if(isRunning && firstTime){ 
	mov	ax, word [isRunning]
	test	ax, ax
	je	L_yak_41
	mov	ax, word [firstTime]
	test	ax, ax
	je	L_yak_41
	; >>>>> Line:	145
	; >>>>> firstTime = 0; 
	mov	word [firstTime], 0
	; >>>>> Line:	146
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	147
	; >>>>> currentTCBIndex = indexOfTaskToRun; 
	mov	ax, word [bp-6]
	mov	word [currentTCBIndex], ax
	; >>>>> Line:	148
	; >>>>> dispatchHelperFirst(); 
	call	dispatchHelperFirst
	; >>>>> Line:	149
	; >>>>> -; 
	jmp	L_yak_39
L_yak_41:
	; >>>>> Line:	154
	; >>>>> if(isRunning){ 
	mov	ax, word [isRunning]
	test	ax, ax
	je	L_yak_42
	; >>>>> Line:	155
	; >>>>> firstTime = 0; 
	mov	word [firstTime], 0
	; >>>>> Line:	156
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	157
	; >>>>> currentTCBIndex = indexOfTaskToRun; 
	mov	ax, word [bp-6]
	mov	word [currentTCBIndex], ax
	; >>>>> Line:	158
	; >>>>> dispatchHelper(); 
	call	dispatchHelper
L_yak_42:
	; >>>>> Line:	159
	; >>>>> return; 
L_yak_39:
	mov	sp, bp
	pop	bp
	ret
L_yak_29:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yak_30
	ALIGN	2
YKDispatcher:
	; >>>>> Line:	163
	; >>>>> void YKDispatcher(){ 
	jmp	L_yak_44
L_yak_45:
	; >>>>> Line:	165
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yak_44:
	push	bp
	mov	bp, sp
	jmp	L_yak_45
	ALIGN	2
YKEnterMutex:
	; >>>>> Line:	168
	; >>>>> void YKEnterMutex(void){ 
	jmp	L_yak_47
L_yak_48:
	; >>>>> Line:	169
	; >>>>> YKEnterMutexHelper(); 
	call	YKEnterMutexHelper
	mov	sp, bp
	pop	bp
	ret
L_yak_47:
	push	bp
	mov	bp, sp
	jmp	L_yak_48
	ALIGN	2
YKExitMutex:
	; >>>>> Line:	172
	; >>>>> void YKExitMutex(void){ 
	jmp	L_yak_50
L_yak_51:
	; >>>>> Line:	173
	; >>>>> YKExitMutexHelper(); 
	call	YKExitMutexHelper
	mov	sp, bp
	pop	bp
	ret
L_yak_50:
	push	bp
	mov	bp, sp
	jmp	L_yak_51
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	176
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yak_53
L_yak_54:
	; >>>>> Line:	178
	; >>>>> okToSwitch = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	178
	; >>>>> okToSwitch = 0; 
	mov	word [okToSwitch], 0
	; >>>>> Line:	179
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	180
	; >>>>> TCBArray[currentTCBIndex].delayCount = count; 
	mov	ax, word [currentTCBIndex]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 30
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	182
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	183
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	185
	; >>>>> okToSwitch = 1; 
	mov	word [okToSwitch], 1
	mov	sp, bp
	pop	bp
	ret
L_yak_53:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_54
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	188
	; >>>>> void YKEnterISR(){ 
	jmp	L_yak_56
L_yak_57:
	; >>>>> Line:	189
	; >>>>> ISRDepth++; 
	inc	word [ISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_yak_56:
	push	bp
	mov	bp, sp
	jmp	L_yak_57
	ALIGN	2
YKExitISR:
	; >>>>> Line:	192
	; >>>>> void YKExitISR(){ 
	jmp	L_yak_59
L_yak_60:
	; >>>>> Line:	193
	; >>>>> ISRDepth--; 
	dec	word [ISRDepth]
	; >>>>> Line:	194
	; >>>>> i 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yak_61
	; >>>>> Line:	195
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yak_61:
	mov	sp, bp
	pop	bp
	ret
L_yak_59:
	push	bp
	mov	bp, sp
	jmp	L_yak_60
L_yak_63:
	DB	"Ignoring",0xA,0
	ALIGN	2
ignoring:
	; >>>>> Line:	199
	; >>>>> void ignoring(){ 
	jmp	L_yak_64
L_yak_65:
	; >>>>> Line:	200
	; >>>>> printString("Ignoring\n"); 
	mov	ax, L_yak_63
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yak_64:
	push	bp
	mov	bp, sp
	jmp	L_yak_65
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	203
	; >>>>> void YKTickHandler(){ 
	jmp	L_yak_67
L_yak_68:
	; >>>>> Line:	208
	; >>>>> YKTickNum++; 
	mov	word [bp-2], 0
	mov	word [bp-4], 0
	; >>>>> Line:	208
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	209
	; >>>>> for(index = 0; index < 15; index++){ 
	mov	word [bp-2], 0
	jmp	L_yak_70
L_yak_69:
	; >>>>> Line:	210
	; >>>>> if(!TCBArray[index].inUse){ 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_73
	; >>>>> Line:	211
	; >>>>> break; 
	jmp	L_yak_71
L_yak_73:
	; >>>>> Line:	213
	; >>>>> if(TCBArray[index].delayCount > 0){ 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 30
	mov	ax, word [si]
	test	ax, ax
	je	L_yak_74
	; >>>>> Line:	214
	; >>>>> TCBArray[index].delayCount--; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 30
	dec	word [si]
L_yak_74:
L_yak_72:
	inc	word [bp-2]
L_yak_70:
	cmp	word [bp-2], 15
	jl	L_yak_69
L_yak_71:
	mov	sp, bp
	pop	bp
	ret
L_yak_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yak_68
	ALIGN	2
nextBP:
	TIMES	2 db 0
nextSP:
	TIMES	2 db 0
nextTask:
	TIMES	2 db 0
YKCtxSwCount:
	TIMES	2 db 0
returnToLocation:
	TIMES	2 db 0
ourTCB:
	TIMES	2 db 0
nextTCB:
	TIMES	2 db 0
TCBArray:
	TIMES	540 db 0
IdleStk:
	TIMES	4096 db 0
dispatchHelper:	

	;Save context of registers (exept for sp)
	
	pushf
	push cs

	mov [returnToLocation], bp
	mov bp, sp
	push word[bp + 4] ;Save return address	

	mov bp, [returnToLocation]

	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push es
	push ds
	push bp

	;Save sp in TCB
	mov bx, word[ourTCB]
	mov word[bx + 2], sp 
 


	;set bx to TCB to restore
	mov bx, word[nextTCB]

	;Get new stack 
	mov sp, word[bx + 2]

	;Restore registers
	pop bp
	pop ds
	pop es
	pop di
	pop si
	pop dx
	pop cx
	pop bx
	pop ax

	
	;The next thing on the stack is now the return address

	iret

dispatchHelperFirst:
	;Don't save anything, just dispatch nextTCB
	;Saving context would save the context from main and that's bad
	mov bx, word[nextTCB]
	
	;Get the task's stack
	mov sp, word[bx + 2]
	mov bp, sp
	
	;Push the return address, we'll use flags and cs from main for now
	pushf
	push cs
	push word[bx]
	
	iret
	

initializeStack:
	
	push bp
	push bx
	mov bp, sp

	mov bx, word[ourTCB]
	mov sp, word[bx + 2]

	pushf
	push cs

	;Push starting address
	push word[bx]

	push ax
	push bx
	push cx
	push dx
	push si
	push di
	push es
	push ds
	push bp
	
	mov bx, word[ourTCB]
	mov word[bx + 2], sp
	
	mov sp, bp
	pop bx	
	pop bp
	ret


YKEnterMutexHelper:
	cli
	ret
	

YKExitMutexHelper:
	sti
	ret
