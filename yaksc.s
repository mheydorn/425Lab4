; Generated by c86 (BYU-NASM) 5.1 (beta) from yak.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
YKIdleCount:
	DW	0
isRunning:
	DW	0
currentTaskPriority:
	DB	102
	ALIGN	2
firstTime:
	DW	1
currentTCBIndex:
	DW	404
ISRDepth:
	DW	0
YKTickNum:
	DW	0
okToSwitch:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	28
	; >>>>> void YKInitialize(){ 
	jmp	L_yak_1
L_yak_2:
	; >>>>> Line:	30
	; >>>>> YKExitMutex(); 
	mov	word [bp-2], 0
	; >>>>> Line:	30
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	31
	; >>>>> for(i= 0; i < 15; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_4
L_yak_3:
	; >>>>> Line:	32
	; >>>>> TCBArray[i].inUse = 0; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	word [si], 0
L_yak_6:
	inc	word [bp-2]
L_yak_4:
	cmp	word [bp-2], 15
	jl	L_yak_3
L_yak_5:
	; >>>>> Line:	35
	; >>>>> YKNewTask(YKIdleTask, (void *)&IdleStk[2048] , 100); 
	mov	ax, 100
	push	ax
	mov	ax, (IdleStk+4096)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	mov	sp, bp
	pop	bp
	ret
L_yak_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_2
	ALIGN	2
YKNewTask:
	; >>>>> Line:	40
	; >>>>> )&(TCBArray[i]); 
	jmp	L_yak_8
L_yak_9:
	; >>>>> Line:	45
	; >>>>> YKEnterMutex(); 
	mov	word [bp-2], 0
	; >>>>> Line:	45
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	46
	; >>>>> for(i = 0; i < 15; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_11
L_yak_10:
	; >>>>> Line:	47
	; >>>>> if(!TCBArray[i].inUse){ 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_14
	; >>>>> Line:	48
	; >>>>> break; 
	jmp	L_yak_12
L_yak_14:
L_yak_13:
	inc	word [bp-2]
L_yak_11:
	cmp	word [bp-2], 15
	jl	L_yak_10
L_yak_12:
	; >>>>> Line:	58
	; >>>>> TCBArray[i].taskID = i; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 24
	mov	ax, word [bp-2]
	mov	word [si], ax
	; >>>>> Line:	59
	; >>>>> TCBArray[i].taskPriority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	push	ax
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	mov	dx, ax
	add	dx, TCBArray
	mov	si, dx
	add	si, 26
	pop	ax
	mov	word [si], ax
	; >>>>> Line:	60
	; >>>>> TCBArray[i].taskStack = taskStack; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 22
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	61
	; >>>>> TCBArray[i].ip = (unsigned int)task; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	mov	si, ax
	add	si, TCBArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	62
	; >>>>> TCBArray[i].taskState = running; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 28
	mov	word [si], 0
	; >>>>> Line:	63
	; >>>>> TCBArray[i].delayCount = 0; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 30
	mov	word [si], 0
	; >>>>> Line:	64
	; >>>>> TCBArray[i].inUse = 1; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	word [si], 1
	; >>>>> Line:	65
	; >>>>> TCBArray[i].sp = (unsigned)(taskStack); 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	66
	; >>>>> TCBArray[i].bp = (unsigned)(taskStack); 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 4
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	69
	; >>>>> ourTCB = (unsigned)&(TCBArray[i]); 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	word [ourTCB], ax
	; >>>>> Line:	70
	; >>>>> YKExitMutex( 
	call	YKExitMutex
	; >>>>> Line:	71
	; >>>>> initializeStack(); 
	call	initializeStack
	; >>>>> Line:	73
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yak_8:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_9
	ALIGN	2
YKRun:
	; >>>>> Line:	76
	; >>>>> void YKRun(){ 
	jmp	L_yak_16
L_yak_17:
	; >>>>> Line:	77
	; >>>>> isRunning = 1; 
	mov	word [isRunning], 1
	; >>>>> Line:	78
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yak_16:
	push	bp
	mov	bp, sp
	jmp	L_yak_17
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	82
	; >>>>> void YKIdleTask(){ 
	jmp	L_yak_19
L_yak_20:
	; >>>>> Line:	84
	; >>>>> while(1){ 
	jmp	L_yak_22
L_yak_21:
	; >>>>> Line:	85
	; >>>>> okToSwitch = 1; 
	mov	word [okToSwitch], 1
	; >>>>> Line:	88
	; >>>>> for(i = 0; i < 1; i++){ 
	mov	word [bp-2], 0
	jmp	L_yak_25
L_yak_24:
	; >>>>> Line:	89
	; >>>>> i++; 
	inc	word [bp-2]
	; >>>>> Line:	90
	; >>>>> i--; 
	dec	word [bp-2]
L_yak_27:
	inc	word [bp-2]
L_yak_25:
	cmp	word [bp-2], 1
	jl	L_yak_24
L_yak_26:
	; >>>>> Line:	92
	; >>>>> YKIdleCount++; 
	inc	word [YKIdleCount]
L_yak_22:
	jmp	L_yak_21
L_yak_23:
	mov	sp, bp
	pop	bp
	ret
L_yak_19:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_20
	ALIGN	2
YKScheduler:
	; >>>>> Line:	96
	; >>>>> void YKScheduler(){ 
	jmp	L_yak_29
L_yak_30:
	; >>>>> Line:	101
	; >>>>> for(index = 0; index < 15 ; index++){ 
	mov	word [bp-2], 0
	mov	word [bp-4], 101
	mov	word [bp-6], 101
	; >>>>> Line:	101
	; >>>>> for(index = 0; index < 15 ; index++){ 
	mov	word [bp-2], 0
	jmp	L_yak_32
L_yak_31:
	; >>>>> Line:	102
	; >>>>> if(!TCBArray[index].inUse){ 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_35
	; >>>>> Line:	103
	; >>>>> break; 
	jmp	L_yak_33
L_yak_35:
	; >>>>> Line:	105
	; >>>>> if(TCBArray[index].delayCount != 0){ 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 30
	mov	ax, word [si]
	test	ax, ax
	je	L_yak_36
	; >>>>> Line:	106
	; >>>>> continue; 
	jmp	L_yak_34
L_yak_36:
	; >>>>> Line:	109
	; >>>>> if(TCBArray[index].taskPriority <= highestPriority){ 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 26
	mov	ax, word [bp-4]
	cmp	ax, word [si]
	jb	L_yak_37
	; >>>>> Line:	110
	; >>>>> re 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 26
	mov	ax, word [si]
	mov	word [bp-4], ax
	; >>>>> Line:	111
	; >>>>> indexOfTaskToRun = index; 
	mov	ax, word [bp-2]
	mov	word [bp-6], ax
L_yak_37:
L_yak_34:
	inc	word [bp-2]
L_yak_32:
	cmp	word [bp-2], 15
	jl	L_yak_31
L_yak_33:
	; >>>>> Line:	128
	; >>>>> ourTCB = (unsigned)&(TCBArray[currentTCBIndex]); 
	mov	ax, word [currentTCBIndex]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	word [ourTCB], ax
	; >>>>> Line:	129
	; >>>>> nextTCB = (unsigned)&(TCBArray[indexOfTaskToRun]); 
	mov	ax, word [bp-6]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	word [nextTCB], ax
	; >>>>> Line:	132
	; >>>>> if(!isRunning){ 
	mov	ax, word [isRunning]
	test	ax, ax
	jne	L_yak_38
	; >>>>> Line:	133
	; >>>>> currentTCBIndex = indexOfTaskToRun; 
	mov	ax, word [bp-6]
	mov	word [currentTCBIndex], ax
	; >>>>> Line:	134
	; >>>>> return; 
	jmp	L_yak_39
L_yak_38:
	; >>>>> Line:	137
	; >>>>> if(currentTCBIndex == indexOfTaskToRun && !firstTime){ 
	mov	ax, word [currentTCBIndex]
	cmp	ax, word [bp-6]
	jne	L_yak_40
	mov	ax, word [firstTime]
	test	ax, ax
	jne	L_yak_40
	; >>>>> Line:	138
	; >>>>> currentTCBIndex = indexOfTaskToRun; 
	mov	ax, word [bp-6]
	mov	word [currentTCBIndex], ax
	; >>>>> Line:	139
	; >>>>> return; 
	jmp	L_yak_39
L_yak_40:
	; >>>>> Line:	144
	; >>>>> if(isRunning && firstTime){ 
	mov	ax, word [isRunning]
	test	ax, ax
	je	L_yak_41
	mov	ax, word [firstTime]
	test	ax, ax
	je	L_yak_41
	; >>>>> Line:	145
	; >>>>> firstTime = 0; 
	mov	word [firstTime], 0
	; >>>>> Line:	146
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	147
	; >>>>> currentTCBIndex = indexOfTaskToRun; 
	mov	ax, word [bp-6]
	mov	word [currentTCBIndex], ax
	; >>>>> Line:	148
	; >>>>> dispatchHelperFirst(); 
	call	dispatchHelperFirst
	; >>>>> Line:	149
	; >>>>> -; 
	jmp	L_yak_39
L_yak_41:
	; >>>>> Line:	154
	; >>>>> if(isRunning){ 
	mov	ax, word [isRunning]
	test	ax, ax
	je	L_yak_42
	; >>>>> Line:	155
	; >>>>> firstTime = 0; 
	mov	word [firstTime], 0
	; >>>>> Line:	156
	; >>>>> YKCtxSwCount++; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	157
	; >>>>> currentTCBIndex = indexOfTaskToRun; 
	mov	ax, word [bp-6]
	mov	word [currentTCBIndex], ax
	; >>>>> Line:	158
	; >>>>> dispatchHelper(); 
	call	dispatchHelper
L_yak_42:
	; >>>>> Line:	159
	; >>>>> return; 
L_yak_39:
	mov	sp, bp
	pop	bp
	ret
L_yak_29:
	push	bp
	mov	bp, sp
	sub	sp, 6
	jmp	L_yak_30
	ALIGN	2
YKDispatcher:
	; >>>>> Line:	163
	; >>>>> void YKDispatcher(){ 
	jmp	L_yak_44
L_yak_45:
	; >>>>> Line:	165
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yak_44:
	push	bp
	mov	bp, sp
	jmp	L_yak_45
	ALIGN	2
YKEnterMutex:
	; >>>>> Line:	168
	; >>>>> void YKEnterMutex(void){ 
	jmp	L_yak_47
L_yak_48:
	; >>>>> Line:	169
	; >>>>> YKEnterMutexHelper(); 
	call	YKEnterMutexHelper
	mov	sp, bp
	pop	bp
	ret
L_yak_47:
	push	bp
	mov	bp, sp
	jmp	L_yak_48
	ALIGN	2
YKExitMutex:
	; >>>>> Line:	172
	; >>>>> void YKExitMutex(void){ 
	jmp	L_yak_50
L_yak_51:
	; >>>>> Line:	173
	; >>>>> YKExitMutexHelper(); 
	call	YKExitMutexHelper
	mov	sp, bp
	pop	bp
	ret
L_yak_50:
	push	bp
	mov	bp, sp
	jmp	L_yak_51
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	176
	; >>>>> void YKDelayTask(unsigned count){ 
	jmp	L_yak_53
L_yak_54:
	; >>>>> Line:	178
	; >>>>> okToSwitch = 0; 
	mov	word [bp-2], 0
	; >>>>> Line:	178
	; >>>>> okToSwitch = 0; 
	mov	word [okToSwitch], 0
	; >>>>> Line:	179
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	180
	; >>>>> TCBArray[currentTCBIndex].delayCount = count; 
	mov	ax, word [currentTCBIndex]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 30
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	182
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	183
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	185
	; >>>>> okToSwitch = 1; 
	mov	word [okToSwitch], 1
	mov	sp, bp
	pop	bp
	ret
L_yak_53:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yak_54
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	188
	; >>>>> void YKEnterISR(){ 
	jmp	L_yak_56
L_yak_57:
	; >>>>> Line:	189
	; >>>>> ISRDepth++; 
	inc	word [ISRDepth]
	mov	sp, bp
	pop	bp
	ret
L_yak_56:
	push	bp
	mov	bp, sp
	jmp	L_yak_57
	ALIGN	2
YKExitISR:
	; >>>>> Line:	192
	; >>>>> void YKExitISR(){ 
	jmp	L_yak_59
L_yak_60:
	; >>>>> Line:	193
	; >>>>> ISRDepth--; 
	dec	word [ISRDepth]
	; >>>>> Line:	194
	; >>>>> i 
	mov	ax, word [ISRDepth]
	test	ax, ax
	jne	L_yak_61
	; >>>>> Line:	195
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yak_61:
	mov	sp, bp
	pop	bp
	ret
L_yak_59:
	push	bp
	mov	bp, sp
	jmp	L_yak_60
L_yak_63:
	DB	"Ignoring",0xA,0
	ALIGN	2
ignoring:
	; >>>>> Line:	199
	; >>>>> void ignoring(){ 
	jmp	L_yak_64
L_yak_65:
	; >>>>> Line:	200
	; >>>>> printString("Ignoring\n"); 
	mov	ax, L_yak_63
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yak_64:
	push	bp
	mov	bp, sp
	jmp	L_yak_65
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	203
	; >>>>> void YKTickHandler(){ 
	jmp	L_yak_67
L_yak_68:
	; >>>>> Line:	208
	; >>>>> YKTickNum++; 
	mov	word [bp-2], 0
	mov	word [bp-4], 0
	; >>>>> Line:	208
	; >>>>> YKTickNum++; 
	inc	word [YKTickNum]
	; >>>>> Line:	209
	; >>>>> for(index = 0; index < 15; index++){ 
	mov	word [bp-2], 0
	jmp	L_yak_70
L_yak_69:
	; >>>>> Line:	210
	; >>>>> if(!TCBArray[index].inUse){ 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 34
	mov	ax, word [si]
	test	ax, ax
	jne	L_yak_73
	; >>>>> Line:	211
	; >>>>> break; 
	jmp	L_yak_71
L_yak_73:
	; >>>>> Line:	213
	; >>>>> if(TCBArray[index].delayCount > 0){ 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 30
	mov	ax, word [si]
	test	ax, ax
	je	L_yak_74
	; >>>>> Line:	214
	; >>>>> TCBArray[index].delayCount--; 
	mov	ax, word [bp-2]
	mov	cx, 36
	imul	cx
	add	ax, TCBArray
	mov	si, ax
	add	si, 30
	dec	word [si]
L_yak_74:
L_yak_72:
	inc	word [bp-2]
L_yak_70:
	cmp	word [bp-2], 15
	jl	L_yak_69
L_yak_71:
	mov	sp, bp
	pop	bp
	ret
L_yak_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yak_68
	ALIGN	2
nextBP:
	TIMES	2 db 0
nextSP:
	TIMES	2 db 0
nextTask:
	TIMES	2 db 0
YKCtxSwCount:
	TIMES	2 db 0
returnToLocation:
	TIMES	2 db 0
ourTCB:
	TIMES	2 db 0
nextTCB:
	TIMES	2 db 0
TCBArray:
	TIMES	540 db 0
IdleStk:
	TIMES	4096 db 0
